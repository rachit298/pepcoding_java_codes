import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int m = scn.nextInt();
    int[][] arr = new int[n][m];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        arr[i][j] = scn.nextInt();
      }
    }
    
    //boolean array to keep track of visited paths
    boolean[][] visited = new boolean[n][m];
    
    floodfill(arr, 0, 0, "", visited);
  }

  // asf -> answer so far
  public static void floodfill(int[][] maze, int sr, int sc, String asf, boolean[][] visited) {

    //check for all conditions
    if (sr < 0 || sc < 0 || sr == maze.length || sc == maze[0].length || maze[sr][sc] == 1 || visited[sr][sc] == true) {
      return;
    }

    //if all above conditions are false then you might have arrived at 
    //destination
    if (sr == maze.length - 1 && sc == maze[0].length - 1) {
      System.out.println(asf);
      return;
    }

    //mark true while checking for the possible path
    visited[sr][sc] = true;

    floodfill(maze, sr - 1, sc, asf + "t", visited); // go top
    floodfill(maze, sr, sc - 1, asf + "l", visited); // go left
    floodfill(maze, sr + 1, sc, asf + "d", visited); // go down
    floodfill(maze, sr, sc + 1, asf + "r", visited); // go right

    //mark false to avoid missing any path left on next check
    visited[sr][sc] = false;
  }
}
